@{
    ViewData["Title"] = "Reporte de Gastos";
}

<div class="container py-4">
    <h2 class="mb-4">@ViewData["Title"]</h2>

<form method="get" class="mb-4">
    <div class="row g-3">
        <div class="col-md-3">
            <label for="categoriaId" class="form-label">Categoría</label>
            <select id="categoriaId" name="categoriaId" class="form-select">
                <option value="">-- Todas las categorías --</option>
                @foreach (var cat in ViewBag.Categorias)
                {
                    if (ViewBag.FiltroCategoria == cat.Id)
                    {
                        <option value="@cat.Id" selected>@cat.Titulo</option>
                    }
                    else
                    {
                        <option value="@cat.Id">@cat.Titulo</option>
                    }
                }
            </select>
        </div>

        <div class="col-md-3">
            <label for="fechaDesde" class="form-label">Fecha desde</label>
            <input type="date" id="fechaDesde" name="fechaDesde" class="form-control" value="@ViewBag.FiltroFechaDesde" />
        </div>

        <div class="col-md-3">
            <label for="fechaHasta" class="form-label">Fecha hasta</label>
            <input type="date" id="fechaHasta" name="fechaHasta" class="form-control" value="@ViewBag.FiltroFechaHasta" />
        </div>

        <div class="col-md-3 d-flex align-items-end">
            <button type="submit" class="btn btn-primary w-100">Filtrar</button>
        </div>
        <a asp-action="ExportarExcel" asp-route-fechaDesde="@ViewBag.FiltroFechaDesde" asp-route-fechaHasta="@ViewBag.FiltroFechaHasta" asp-route-categoriaId="@ViewBag.FiltroCategoria" class="btn btn-success mb-3">Exportar Excel</a>

    </div>
</form>

<div class="card p-4 shadow-sm">
    <h5>Gastos por Categoría</h5>
    <canvas id="gastosChart" height="100"></canvas>
</div>

<div class="card p-4 shadow-sm mt-4">
    <h5 class="mb-3">Gastos Totales por Mes</h5>
    <canvas id="mensualChart" height="100"></canvas>
</div>

    <div class="card p-4 shadow-sm mt-4">
        <h5>Detalle de Gastos por Categoría</h5>
        <table class="table table-striped table-hover table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Categoría</th>
                    <th class="text-end">Monto Total</th>
                    <th class="text-center">Estado</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.DetalleGastos != null)
                {
                    foreach (var item in (List<MvcTemplate.Models.ViewModels.ReporteCategoriaViewModel>)ViewBag.DetalleGastos)
                    {
                        <tr class="@(item.Excedido ? "table-danger" : "")" title="@(item.Excedido ? "Excedido el tope permitido" : "Dentro del tope permitido")">
                            <td>@item.Titulo</td>
                            <td class="text-end">@item.GastoTotal.ToString("C")</td>
                            <td class="text-center">
                                @if (item.Excedido)
                                {
                                    <span class="badge bg-danger">Excedido</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">OK</span>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center">No hay datos para mostrar.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const categorias = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.CategoriasNombres));
        const montos = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Montos));

        const ctx = document.getElementById('gastosChart').getContext('2d');
        const gastosChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: categorias,
                datasets: [{
                    label: 'Gasto por Categoría',
                    data: montos,
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
    </script>

    <script>
        const meses = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Meses));
        const montosMensuales = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.MontosMensuales));

        const mensualCtx = document.getElementById('mensualChart').getContext('2d');
        const mensualChart = new Chart(mensualCtx, {
            type: 'line',
            data: {
                labels: meses,
                datasets: [{
                    label: 'Gastos Mensuales',
                    data: montosMensuales,
                    backgroundColor: 'rgba(255, 99, 132, 0.4)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    pointRadius: 5,
                    pointHoverRadius: 8
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        labels: {
                            font: {
                                size: 14
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
    </script>

}
